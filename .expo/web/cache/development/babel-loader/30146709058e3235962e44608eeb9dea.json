{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { db } from \"../../database/firebase\";\nexport var useServiceId = function useServiceId(id) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      service = _useState2[0],\n      setService = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var getDocById = useCallback(function _callee(id) {\n    var dbRef, doc, service, user, category;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dbRef = db.collection('services').doc(id);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dbRef.get());\n\n          case 3:\n            doc = _context.sent;\n            service = doc.data();\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(service.user.get());\n\n          case 7:\n            user = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(service.category.get());\n\n          case 10:\n            category = _context.sent;\n            service.user = user.data();\n            service.category = category.data();\n            service.category.id = category.id;\n            setLoading(false);\n            setService(service);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [id]);\n  useEffect(function () {\n    getDocById(id);\n  }, [id]);\n  return {\n    service: service,\n    loading: loading\n  };\n};","map":{"version":3,"sources":["C:/Users/Samar/Documents/projects/servicesapp/servicesapp/src/hooks/useServiceId.js"],"names":["useCallback","useEffect","useState","db","useServiceId","id","service","setService","loading","setLoading","getDocById","dbRef","collection","doc","get","data","user","category"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,EAAT;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAQ;AAClC,kBAA8BH,QAAQ,EAAtC;AAAA;AAAA,MAAOI,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA8BL,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,UAAU,GAAGV,WAAW,CAAC,iBAAOK,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBM,YAAAA,KADuB,GACfR,EAAE,CAACS,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BR,EAA9B,CADe;AAAA;AAAA,6CAEXM,KAAK,CAACG,GAAN,EAFW;;AAAA;AAEvBD,YAAAA,GAFuB;AAGvBP,YAAAA,OAHuB,GAGbO,GAAG,CAACE,IAAJ,EAHa;AAAA;AAAA,6CAIVT,OAAO,CAACU,IAAR,CAAaF,GAAb,EAJU;;AAAA;AAIvBE,YAAAA,IAJuB;AAAA;AAAA,6CAKNV,OAAO,CAACW,QAAR,CAAiBH,GAAjB,EALM;;AAAA;AAKvBG,YAAAA,QALuB;AAM7BX,YAAAA,OAAO,CAACU,IAAR,GAAeA,IAAI,CAACD,IAAL,EAAf;AACAT,YAAAA,OAAO,CAACW,QAAR,GAAmBA,QAAQ,CAACF,IAAT,EAAnB;AACAT,YAAAA,OAAO,CAACW,QAAR,CAAiBZ,EAAjB,GAAsBY,QAAQ,CAACZ,EAA/B;AACAI,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,YAAAA,UAAU,CAACD,OAAD,CAAV;;AAV6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAW3B,CAACD,EAAD,CAX2B,CAA9B;AAaAJ,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,UAAU,CAACL,EAAD,CAAV;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;AAIA,SAAO;AACLC,IAAAA,OAAO,EAAPA,OADK;AAELE,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CAzBM","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport { db } from '../../database/firebase'\r\n\r\nexport const useServiceId = (id) => {\r\n  const [service, setService] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const getDocById = useCallback(async (id) => {\r\n    const dbRef = db.collection('services').doc(id)\r\n    const doc = await dbRef.get()\r\n    const service = doc.data()\r\n    const user = await service.user.get()\r\n    const category = await service.category.get()\r\n    service.user = user.data()\r\n    service.category = category.data()\r\n    service.category.id = category.id\r\n    setLoading(false)\r\n    setService(service)\r\n  }, [id])\r\n\r\n  useEffect(() => {\r\n    getDocById(id)\r\n  }, [id])\r\n\r\n  return {\r\n    service,\r\n    loading\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}